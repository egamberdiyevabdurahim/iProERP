from aiogram import types, Router, Ffrom aiogram.filters import CommandStartfrom aiogram.fsm.context import FSMContextfrom aiogram.types import (    InlineQueryResultArticle, InputTextMessageContent, InlineQuery,    InlineKeyboardMarkup, InlineKeyboardButton)from buttons.admin import menu_adm_kb, started_work_adm_kbfrom filters.role import RoleFilterfrom loader import User, DailyReportWorker, Gadget, Model, Account, botfrom roles.admin.detailed_adm_hl import detailed_clfrom utils.notifier import notice_groupfrom utils.validator import message_deleterrouter = Router()@router.message(CommandStart())async def start_command(message: types.Message, state: FSMContext=FSMContext, u=None, delete=True):    accept = True    if message.text:        parts = message.text.split(' ')        hidden_code = parts[-1] if len(parts) > 1 else None        if hidden_code and hidden_code.startswith('movie_'):            idn = hidden_code.split('_')[1]            accept = False            await detailed_cl(call=message, idn=idn)    if accept:        if not u:            u = message.from_user        try:            await state.clear()        except Exception:            pass        user_d = await User.get_data(u.id)        if not user_d:            role = 0            acc = await Account.get_data(chat_id=u.id)            if acc:                role = acc.role            await User.create(                chat_id=u.id,                tg_username=u.username,                first_name=u.first_name,                last_name=u.last_name,                role=role            )            user_d = await User.get_data(u.id)        data = await DailyReportWorker.get_by_user_active(user_d.idn)        rkb = await menu_adm_kb()        if data:            rkb = await started_work_adm_kb(u=user_d)        if rkb:            if delete:                await message_deleter(u_id=u.id, message_id=message.message_id)            try:                await message.edit_text(                    text=f"Assalomu Aleykum iProService-ga Xush kelibsiz - {u.first_name}",                    reply_markup=rkb,                    parse_mode='HTML'                )            except Exception:                await message.answer(                    text=f"Assalomu Aleykum iProService-ga Xush kelibsiz - {u.first_name}",                    reply_markup=rkb,                    parse_mode='HTML'                )        # Log usage or new u        if user_d:            await user_d.use()        else:            text = (                f"Yangi Botga start bergan foydalanuvchi:\n"                f"Ismi: {u.first_name or 'Formati Xato'}\n"                f"Familiyasi: {u.last_name or 'Mavjud Emas'}\n"                f"Telegram ID: {u.id}\n"                f"Telegram Username: {u.username or 'Mavjud Emas'}"            )            await notice_group(message=text)@router.callback_query(F.data=='home')async def home_button(call: types.CallbackQuery, state: FSMContext):    await start_command(message=call.message, state=state, u=call.from_user)@router.inline_query(RoleFilter([1,2,3]))async def inline_query_handler(query: InlineQuery):    search_text = query.query.lower()    if search_text == '':        gadgets = await Gadget.get_by_search(search_query=search_text, lt=50)    else:        gadgets = await Gadget.get_by_search(search_query=search_text)    results = []    for gadget in gadgets:        model = await Model.get_data(idn=gadget.model)        title = f"{model.name} {gadget.name}"        description = (            f"IMEI/S-N: {gadget.imei1}/{gadget.imei2} | {gadget.serial_number}\n"            f"Mijoz: {gadget.client_name} | Raqami: {gadget.client_phone_number}\n"            f"Yana: {gadget.description[:33]}"        )        results.append(            InlineQueryResultArticle(                id=str(gadget.idn),                title=title,                description=description,                input_message_content=InputTextMessageContent(                    message_text=f"<b>{title}</b>\n\n{description}",                    parse_mode="HTML"                ),                reply_markup=InlineKeyboardMarkup(                    inline_keyboard=[                        [                            InlineKeyboardButton(                                text="ðŸ–¼ Media bilan koâ€˜rish",                                url=f"https://t.me/{(await bot.me()).username}?start=movie_{gadget.idn}"                            )                        ]                    ]                )            )        )    await query.answer(results, cache_time=1, is_personal=True)# @router.call(Command("dev"))# async def dev_command(call: types.Message, state: FSMContext):#     await state.clear()#     await call.answer(f"""# Telegram: {ADMIN_LINK}# Email: {ADMIN_EMAIL}""")